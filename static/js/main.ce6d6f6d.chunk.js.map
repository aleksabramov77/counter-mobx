{"version":3,"sources":["store/counter.js","Counter.js","store/todo.js","Todo.js","App.js","reportWebVitals.js","index.js"],"names":["makeAutoObservable","this","count","console","log","timer","Counter","observer","className","counter","total","onClick","decrement","increment","id","title","completed","todos","reduce","prev","current","todo","nextId","push","filter","fetch","then","response","json","runInAction","Todo","useState","newTodo","setNewTodo","fetchTodo","type","value","onChange","e","target","placeholder","addTodo","map","t","checked","completeTodo","removeTodo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAyBe,M,WAnBX,aAAgB,6CAHR,GAGO,yBAFP,IAGJA,YAAmBC,M,6CAGvB,WACIA,KAAKC,QACLC,QAAQC,IAAI,aAAcH,KAAKC,S,uBAGnC,WACID,KAAKC,QACLC,QAAQC,IAAI,aAAcH,KAAKC,S,iBAGnC,WACI,MAAO,mBAAqBD,KAAKC,MAAQD,KAAKI,U,aC2BvCC,EA3CCC,aAAS,WACjB,OACI,sBAAKC,UAAU,UAAf,UACKC,EAAQC,MACT,6BAAKD,EAAQP,QACb,wBAAQS,QAAS,WAAQF,EAAQG,aAAjC,gBACA,wBAAQD,QAAS,kBAAMF,EAAQI,aAA/B,sB,eCoCD,M,WAlCX,aAAgB,6CAVR,CACJ,CAAEC,GAAI,EAAGC,MAAO,+FAAqBC,WAAW,GAChD,CAAEF,GAAI,EAAGC,MAAO,wFAAmBC,WAAW,GAC9C,CAAEF,GAAI,EAAGC,MAAO,yFAAoBC,WAAW,KAQ/ChB,YAAmBC,M,wCALvB,WACI,OAAOA,KAAKgB,MAAMC,QAAO,SAACC,EAAMC,GAAP,OAAoBD,EAAKL,IAAMM,EAAQN,GAAKK,EAAOC,KAASN,GAAK,I,qBAQ9F,SAASO,GACLlB,QAAQC,IAAI,WAAYiB,EAAMpB,KAAKqB,QACnCrB,KAAKgB,MAAMM,KAAX,2BACOF,GADP,IAEIP,GAAIb,KAAKqB,Y,wBAIjB,SAAYR,GACRb,KAAKgB,MAAQhB,KAAKgB,MAAMO,QAAO,SAAAH,GAAI,OAAIA,EAAKP,KAAOA,O,0BAIvD,SAAcO,GACVA,EAAKL,WAAaK,EAAKL,Y,uBAG3B,WAAc,IAAD,OACTS,MAAM,8CAAgDxB,KAAKqB,QACtDI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAEFC,aAAY,WACR,EAAKZ,MAAMM,KAAK,CAAET,GAAIc,EAAKd,GAAIC,MAAOa,EAAKb,MAAOC,UAAWY,EAAKZ,sB,MCfvEc,EAtBFvB,aAAS,WAAO,IAAD,EAEMwB,mBAAS,YAFf,mBAEjBC,EAFiB,KAERC,EAFQ,KAIxB,OAAO,gCACH,wBAAQtB,QAAS,WAAOU,EAAKa,aAA7B,wBACA,uBACA,uBAAOC,KAAK,OAAOC,MAAOJ,EAASK,SAAU,SAAAC,GAAC,OAAIL,EAAWK,EAAEC,OAAOH,QAAQI,YAAY,aAC1F,wBAAQ7B,QAAS,WACbU,EAAKoB,QAAQ,CAAE1B,MAAOiB,EAAShB,WAAW,KAD9C,sBAKCK,EAAKJ,MAAMyB,KAAI,SAAAC,GAAC,OAAI,sBAAKnC,UAAU,OAAf,UACb,uBAAO2B,KAAK,WAAWS,QAASD,EAAE3B,UAAWqB,SAAU,WAAOhB,EAAKwB,aAAaF,MAC/EA,EAAE5B,MACH,wBAAQJ,QAAS,WAAOU,EAAKyB,WAAWH,EAAE7B,KAA1C,iBAHwC6B,EAAE7B,aCH3CiC,MATf,WACI,OACI,sBAAKvC,UAAU,MAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCGGwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ce6d6f6d.chunk.js","sourcesContent":["import { makeAutoObservable } from 'mobx'\r\n\r\nclass Counter {\r\n    count = 0\r\n    timer = 60 // для демонстрации computed свойства\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)    // сделать объекты этого класса автоматически отслеживаемыми\r\n    }\r\n\r\n    decrement () {              // аналог action в редакс\r\n        this.count--\r\n        console.log('decrement ', this.count)\r\n    }\r\n\r\n    increment () {              // аналог action в редакс\r\n        this.count++\r\n        console.log('increment ', this.count)\r\n    }\r\n\r\n    get total () {\r\n        return `Count + Timer = ` + this.count + this.timer\r\n    }\r\n}\r\n\r\nexport default new Counter()    // вернуть по умолчанию объект класса Counter","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport counter from './store/counter'\r\n\r\n// с помощью функции observe и функциональной компоненты\r\nconst Counter = observer(() => {\r\n        return (\r\n            <div className=\"Counter\">\r\n                {counter.total}\r\n                <h1>{counter.count}</h1>\r\n                <button onClick={() => { counter.decrement() }}>-1</button>\r\n                <button onClick={() => counter.increment()}>+1</button>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\n/*\r\n// с помощью функции observe и классовой компоненты\r\nconst Counter = observer( class extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Counter\">\r\n                <h1>{counter.count}</h1>\r\n                <button onClick={() => { counter.decrement() }}>-1</button>\r\n                <button onClick={() => counter.increment()}>+1</button>\r\n            </div>\r\n        )\r\n    }\r\n})\r\n*/\r\n\r\n/*\r\n// с помощью декоратора observe и классовой компоненты\r\n@observer       // декоратор \"установить наблюдение за компонентой\". Если её состояние(state) меняется, то перерисовать её.\r\nclass Counter extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"Counter\">\r\n                <h1>{counter.count}</h1>\r\n                <button onClick={() => { counter.decrement() }}>-1</button>\r\n                <button onClick={() => counter.increment()}>+1</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n*/\r\n\r\nexport default Counter","import { makeAutoObservable, runInAction } from 'mobx'\r\n\r\nclass Todo {\r\n    todos = [\r\n        { id: 1, title: 'Сходить в магазин', completed: false },\r\n        { id: 2, title: 'Посмотреть кино', completed: true },\r\n        { id: 3, title: 'Сходить на улицу', completed: false },\r\n    ]\r\n\r\n    get nextId () {\r\n        return this.todos.reduce((prev, current) => +prev.id > +current.id ? prev : current).id + 1\r\n    }\r\n\r\n    constructor () {\r\n        makeAutoObservable(this)    // сделать объекты этого класса автоматически отслеживаемыми\r\n    }\r\n\r\n    // This method will be wrapped into `action` automatically by `makeAutoObservable`\r\n    addTodo (todo) {              // аналог action в редакс\r\n        console.log('addTodo ', todo, this.nextId)\r\n        this.todos.push({\r\n            ...todo,\r\n            id: this.nextId\r\n        })\r\n    }\r\n\r\n    removeTodo (id) {              // аналог action в редакс\r\n        this.todos = this.todos.filter(todo => todo.id !== id)\r\n    }\r\n\r\n    // This method will be wrapped into `action` automatically by `makeAutoObservable`\r\n    completeTodo (todo) {\r\n        todo.completed = !todo.completed\r\n    }\r\n\r\n    fetchTodo () {\r\n        fetch(`https://jsonplaceholder.typicode.com/todos/` + this.nextId)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                // since my fetchTodo function is async then I need to use runInAction inside\r\n                runInAction(() => {\r\n                    this.todos.push({ id: json.id, title: json.title, completed: json.completed })\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport default new Todo()    // вернуть по умолчанию объект класса Todo","import React, { useState } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport todo from './store/todo'\r\n\r\nconst Todo = observer(() => {\r\n\r\n    const [newTodo, setNewTodo] = useState('New todo')\r\n\r\n    return <div>\r\n        <button onClick={() => {todo.fetchTodo()}}>Fetch todo</button>\r\n        <br/>\r\n        <input type='text' value={newTodo} onChange={e => setNewTodo(e.target.value)} placeholder='new todo'/>\r\n        <button onClick={() => {\r\n            todo.addTodo({ title: newTodo, completed: false })\r\n        }}>\r\n            Add Todo\r\n        </button>\r\n        {todo.todos.map(t => <div className='todo' key={t.id}>\r\n                <input type='checkbox' checked={t.completed} onChange={() => {todo.completeTodo(t)}}/>\r\n                {t.title}\r\n                <button onClick={() => {todo.removeTodo(t.id)}}>x</button>\r\n            </div>\r\n        )}\r\n    </div>\r\n})\r\n\r\nexport default Todo","import './App.css'\nimport Counter from './Counter'\nimport React from 'react'\nimport Todo from './Todo'\n\nfunction App () {\n    return (\n        <div className=\"App\">\n            <Counter/>\n            <Todo/>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}